public double calculateTheta(double toolX, double toolY, boolean isLeft) {

        double motorX, motorY;

        if (isLeft) {
        motorX = leftMotorX;
        motorY = leftMotorY;
        } else {
        motorX = rightMotorX;
        motorY = rightMotorY;
        }

        double dx1 = toolX - motorX;
        double dy1 = toolY - motorY;

        double d = Math.sqrt(dx1*dx1 + dy1*dy1);
        double h = Math.sqrt((r * r) - Math.pow(d/2, 2));

//        System.out.println("d: " + d + " h: " + h);

        double xA = (motorX + toolX) * 0.5;
        double yA = (motorY + toolY) * 0.5;

//        System.out.println("xA: " + xA + " yA: " + yA);

        double alpha = Math.atan2(dy1, dx1);

        double jointX1 = xA + h * Math.sin(alpha);
        double jointY1 = yA - h * Math.cos(alpha);

        double theta1 = Math.PI/2 - Math.atan2(jointX1 - motorX, motorY - jointY1);

        double dx2 = toolX - motorX

        double jointX2 = xA - h * (alpha);

        double jointY = yA - h * ((motorX-toolX)/d);

        double jointX = 0.0;

        if (!isLeft) {
        if (jointX1 > jointX2) {
        jointX = jointX1;
        } else {
        jointX = jointX2;
        }
        }

        if (isLeft) {
        if (jointX1 < jointX2) {
        jointX = jointX1;
        } else {
        jointX = jointX2;
        }
        }

        System.out.println("jointX: " + jointX + " jointY: " + jointY);


//        double distanceX = jointX - motorX; // distance x (joint to motor)
//        double distanceY = jointY - motorY; // distance y (joint to motor)

//        double distance = Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));

        double thetaDegrees = Math.toDegrees(theta);

//        System.out.println("distance: " + distance);
//        System.out.println("angle: " + Math.abs(thetaDegrees));

        return thetaDegrees;

        }